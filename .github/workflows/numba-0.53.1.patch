diff -Naur -x '*.pyc' numba-orig/core/base.py numba/core/base.py
--- numba-orig/core/base.py	2023-07-22 15:46:43.672388722 -0700
+++ numba/core/base.py	2023-07-22 18:59:00.665199615 -0700
@@ -1086,7 +1086,7 @@
         llvoidptr = self.get_value_type(types.voidptr)
         addr = self.get_constant(types.uintp, intaddr).inttoptr(llvoidptr)
         # Use a unique name by embedding the address value
-        symname = 'numba.dynamic.globals.{:x}'.format(intaddr)
+        symname = 'numba_dynamic_globals_{:x}'.format(intaddr)
         gv = mod.add_global_variable(llvoidptr, name=symname)
         # Use linkonce linkage to allow merging with other GV of the same name.
         # And, avoid optimization from assuming its value.
diff -Naur -x '*.pyc' numba-orig/cuda/target.py numba/cuda/target.py
--- numba-orig/cuda/target.py	2023-07-22 15:47:35.537136604 -0700
+++ numba/cuda/target.py	2023-07-22 18:59:25.973644618 -0700
@@ -61,6 +61,7 @@
 class CUDATargetContext(BaseContext):
     implement_powi_as_math_call = True
     strict_alignment = True
+    allow_dynamic_globals = True
 
     @property
     def DIBuilder(self):
@@ -220,43 +221,18 @@
         Unlike the parent version.  This returns a a pointer in the constant
         addrspace.
         """
-
-        lmod = builder.module
-
-        constvals = [
-            self.get_constant(types.byte, i)
-            for i in iter(arr.tobytes(order='A'))
-        ]
-        constary = lc.Constant.array(Type.int(8), constvals)
-
-        addrspace = nvvm.ADDRSPACE_CONSTANT
-        gv = lmod.add_global_variable(constary.type, name="_cudapy_cmem",
-                                      addrspace=addrspace)
-        gv.linkage = lc.LINKAGE_INTERNAL
-        gv.global_constant = True
-        gv.initializer = constary
-
-        # Preserve the underlying alignment
-        lldtype = self.get_data_type(aryty.dtype)
-        align = self.get_abi_sizeof(lldtype)
-        gv.align = 2 ** (align - 1).bit_length()
-
-        # Convert to generic address-space
-        conv = nvvmutils.insert_addrspace_conv(lmod, Type.int(8), addrspace)
-        addrspaceptr = gv.bitcast(Type.pointer(Type.int(8), addrspace))
-        genptr = builder.call(conv, [addrspaceptr])
-
-        # Create array object
-        ary = self.make_array(aryty)(self, builder)
+        dataptr = arr.device_ctypes_pointer.value
+        data = self.add_dynamic_addr(builder, dataptr, info=str(type(dataptr)))
+        rt_addr = self.add_dynamic_addr(builder, id(arr), info=str(type(arr)))
         kshape = [self.get_constant(types.intp, s) for s in arr.shape]
         kstrides = [self.get_constant(types.intp, s) for s in arr.strides]
-        self.populate_array(ary, data=builder.bitcast(genptr, ary.data.type),
+        cary = self.make_array(aryty)(self, builder)
+        self.populate_array(cary, data=builder.bitcast(data, cary.data.type),
                             shape=kshape,
                             strides=kstrides,
-                            itemsize=ary.itemsize, parent=ary.parent,
+                            itemsize=arr.dtype.itemsize, parent=rt_addr,
                             meminfo=None)
-
-        return ary._getvalue()
+        return cary._getvalue()
 
     def insert_const_string(self, mod, string):
         """
