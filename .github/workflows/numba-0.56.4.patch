diff -Naur -x '*.pyc' numba-original/core/base.py numba/core/base.py
--- numba-original/core/base.py	2022-11-22 00:01:56.000000000 -0800
+++ numba/core/base.py	2023-07-26 06:59:17.148560897 -0700
@@ -1089,7 +1089,7 @@
         llvoidptr = self.get_value_type(types.voidptr)
         addr = self.get_constant(types.uintp, intaddr).inttoptr(llvoidptr)
         # Use a unique name by embedding the address value
-        symname = 'numba.dynamic.globals.{:x}'.format(intaddr)
+        symname = 'numba_dynamic_globals_{:x}'.format(intaddr)
         gv = cgutils.add_global_variable(mod, llvoidptr, symname)
         # Use linkonce linkage to allow merging with other GV of the same name.
         # And, avoid optimization from assuming its value.
diff -Naur -x '*.pyc' numba-original/cuda/target.py numba/cuda/target.py
--- numba-original/cuda/target.py	2022-11-22 00:01:56.000000000 -0800
+++ numba/cuda/target.py	2023-07-26 07:03:19.018783117 -0700
@@ -64,6 +64,7 @@
 class CUDATargetContext(BaseContext):
     implement_powi_as_math_call = True
     strict_alignment = True
+    allow_dynamic_globals = True
 
     def __init__(self, typingctx, target='cuda'):
         super().__init__(typingctx, target)
@@ -272,44 +273,19 @@
         Unlike the parent version.  This returns a a pointer in the constant
         addrspace.
         """
-
-        lmod = builder.module
-
-        constvals = [
-            self.get_constant(types.byte, i)
-            for i in iter(arr.tobytes(order='A'))
-        ]
-        constaryty = ir.ArrayType(ir.IntType(8), len(constvals))
-        constary = ir.Constant(constaryty, constvals)
-
-        addrspace = nvvm.ADDRSPACE_CONSTANT
-        gv = cgutils.add_global_variable(lmod, constary.type, "_cudapy_cmem",
-                                         addrspace=addrspace)
-        gv.linkage = 'internal'
-        gv.global_constant = True
-        gv.initializer = constary
-
-        # Preserve the underlying alignment
-        lldtype = self.get_data_type(aryty.dtype)
-        align = self.get_abi_sizeof(lldtype)
-        gv.align = 2 ** (align - 1).bit_length()
-
-        # Convert to generic address-space
-        conv = nvvmutils.insert_addrspace_conv(lmod, ir.IntType(8), addrspace)
-        addrspaceptr = gv.bitcast(ir.PointerType(ir.IntType(8), addrspace))
-        genptr = builder.call(conv, [addrspaceptr])
-
-        # Create array object
-        ary = self.make_array(aryty)(self, builder)
+        dataptr = arr.device_ctypes_pointer.value
+        data = self.add_dynamic_addr(builder, dataptr, info=str(type(dataptr)))
+        rt_addr = self.add_dynamic_addr(builder, id(arr), info=str(type(arr)))
         kshape = [self.get_constant(types.intp, s) for s in arr.shape]
         kstrides = [self.get_constant(types.intp, s) for s in arr.strides]
-        self.populate_array(ary, data=builder.bitcast(genptr, ary.data.type),
+        cary = self.make_array(aryty)(self, builder)
+        self.populate_array(cary, data=builder.bitcast(data, cary.data.type),
                             shape=kshape,
                             strides=kstrides,
-                            itemsize=ary.itemsize, parent=ary.parent,
+                            itemsize=arr.dtype.itemsize, parent=rt_addr,
                             meminfo=None)
 
-        return ary._getvalue()
+        return cary._getvalue()
 
     def insert_const_string(self, mod, string):
         """
